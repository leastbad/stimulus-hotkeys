{"version":3,"file":"index.umd.js","sources":["../node_modules/@hotwired/stimulus/dist/stimulus.js","../node_modules/hotkeys-js/dist/hotkeys.esm.js","../src/index.js"],"sourcesContent":["/*\nStimulus 3.0.1\nCopyright Â© 2021 Basecamp, LLC\n */\nclass EventListener {\n    constructor(eventTarget, eventName, eventOptions) {\n        this.eventTarget = eventTarget;\n        this.eventName = eventName;\n        this.eventOptions = eventOptions;\n        this.unorderedBindings = new Set();\n    }\n    connect() {\n        this.eventTarget.addEventListener(this.eventName, this, this.eventOptions);\n    }\n    disconnect() {\n        this.eventTarget.removeEventListener(this.eventName, this, this.eventOptions);\n    }\n    bindingConnected(binding) {\n        this.unorderedBindings.add(binding);\n    }\n    bindingDisconnected(binding) {\n        this.unorderedBindings.delete(binding);\n    }\n    handleEvent(event) {\n        const extendedEvent = extendEvent(event);\n        for (const binding of this.bindings) {\n            if (extendedEvent.immediatePropagationStopped) {\n                break;\n            }\n            else {\n                binding.handleEvent(extendedEvent);\n            }\n        }\n    }\n    get bindings() {\n        return Array.from(this.unorderedBindings).sort((left, right) => {\n            const leftIndex = left.index, rightIndex = right.index;\n            return leftIndex < rightIndex ? -1 : leftIndex > rightIndex ? 1 : 0;\n        });\n    }\n}\nfunction extendEvent(event) {\n    if (\"immediatePropagationStopped\" in event) {\n        return event;\n    }\n    else {\n        const { stopImmediatePropagation } = event;\n        return Object.assign(event, {\n            immediatePropagationStopped: false,\n            stopImmediatePropagation() {\n                this.immediatePropagationStopped = true;\n                stopImmediatePropagation.call(this);\n            }\n        });\n    }\n}\n\nclass Dispatcher {\n    constructor(application) {\n        this.application = application;\n        this.eventListenerMaps = new Map;\n        this.started = false;\n    }\n    start() {\n        if (!this.started) {\n            this.started = true;\n            this.eventListeners.forEach(eventListener => eventListener.connect());\n        }\n    }\n    stop() {\n        if (this.started) {\n            this.started = false;\n            this.eventListeners.forEach(eventListener => eventListener.disconnect());\n        }\n    }\n    get eventListeners() {\n        return Array.from(this.eventListenerMaps.values())\n            .reduce((listeners, map) => listeners.concat(Array.from(map.values())), []);\n    }\n    bindingConnected(binding) {\n        this.fetchEventListenerForBinding(binding).bindingConnected(binding);\n    }\n    bindingDisconnected(binding) {\n        this.fetchEventListenerForBinding(binding).bindingDisconnected(binding);\n    }\n    handleError(error, message, detail = {}) {\n        this.application.handleError(error, `Error ${message}`, detail);\n    }\n    fetchEventListenerForBinding(binding) {\n        const { eventTarget, eventName, eventOptions } = binding;\n        return this.fetchEventListener(eventTarget, eventName, eventOptions);\n    }\n    fetchEventListener(eventTarget, eventName, eventOptions) {\n        const eventListenerMap = this.fetchEventListenerMapForEventTarget(eventTarget);\n        const cacheKey = this.cacheKey(eventName, eventOptions);\n        let eventListener = eventListenerMap.get(cacheKey);\n        if (!eventListener) {\n            eventListener = this.createEventListener(eventTarget, eventName, eventOptions);\n            eventListenerMap.set(cacheKey, eventListener);\n        }\n        return eventListener;\n    }\n    createEventListener(eventTarget, eventName, eventOptions) {\n        const eventListener = new EventListener(eventTarget, eventName, eventOptions);\n        if (this.started) {\n            eventListener.connect();\n        }\n        return eventListener;\n    }\n    fetchEventListenerMapForEventTarget(eventTarget) {\n        let eventListenerMap = this.eventListenerMaps.get(eventTarget);\n        if (!eventListenerMap) {\n            eventListenerMap = new Map;\n            this.eventListenerMaps.set(eventTarget, eventListenerMap);\n        }\n        return eventListenerMap;\n    }\n    cacheKey(eventName, eventOptions) {\n        const parts = [eventName];\n        Object.keys(eventOptions).sort().forEach(key => {\n            parts.push(`${eventOptions[key] ? \"\" : \"!\"}${key}`);\n        });\n        return parts.join(\":\");\n    }\n}\n\nconst descriptorPattern = /^((.+?)(@(window|document))?->)?(.+?)(#([^:]+?))(:(.+))?$/;\nfunction parseActionDescriptorString(descriptorString) {\n    const source = descriptorString.trim();\n    const matches = source.match(descriptorPattern) || [];\n    return {\n        eventTarget: parseEventTarget(matches[4]),\n        eventName: matches[2],\n        eventOptions: matches[9] ? parseEventOptions(matches[9]) : {},\n        identifier: matches[5],\n        methodName: matches[7]\n    };\n}\nfunction parseEventTarget(eventTargetName) {\n    if (eventTargetName == \"window\") {\n        return window;\n    }\n    else if (eventTargetName == \"document\") {\n        return document;\n    }\n}\nfunction parseEventOptions(eventOptions) {\n    return eventOptions.split(\":\").reduce((options, token) => Object.assign(options, { [token.replace(/^!/, \"\")]: !/^!/.test(token) }), {});\n}\nfunction stringifyEventTarget(eventTarget) {\n    if (eventTarget == window) {\n        return \"window\";\n    }\n    else if (eventTarget == document) {\n        return \"document\";\n    }\n}\n\nfunction camelize(value) {\n    return value.replace(/(?:[_-])([a-z0-9])/g, (_, char) => char.toUpperCase());\n}\nfunction capitalize(value) {\n    return value.charAt(0).toUpperCase() + value.slice(1);\n}\nfunction dasherize(value) {\n    return value.replace(/([A-Z])/g, (_, char) => `-${char.toLowerCase()}`);\n}\nfunction tokenize(value) {\n    return value.match(/[^\\s]+/g) || [];\n}\n\nclass Action {\n    constructor(element, index, descriptor) {\n        this.element = element;\n        this.index = index;\n        this.eventTarget = descriptor.eventTarget || element;\n        this.eventName = descriptor.eventName || getDefaultEventNameForElement(element) || error(\"missing event name\");\n        this.eventOptions = descriptor.eventOptions || {};\n        this.identifier = descriptor.identifier || error(\"missing identifier\");\n        this.methodName = descriptor.methodName || error(\"missing method name\");\n    }\n    static forToken(token) {\n        return new this(token.element, token.index, parseActionDescriptorString(token.content));\n    }\n    toString() {\n        const eventNameSuffix = this.eventTargetName ? `@${this.eventTargetName}` : \"\";\n        return `${this.eventName}${eventNameSuffix}->${this.identifier}#${this.methodName}`;\n    }\n    get params() {\n        if (this.eventTarget instanceof Element) {\n            return this.getParamsFromEventTargetAttributes(this.eventTarget);\n        }\n        else {\n            return {};\n        }\n    }\n    getParamsFromEventTargetAttributes(eventTarget) {\n        const params = {};\n        const pattern = new RegExp(`^data-${this.identifier}-(.+)-param$`);\n        const attributes = Array.from(eventTarget.attributes);\n        attributes.forEach(({ name, value }) => {\n            const match = name.match(pattern);\n            const key = match && match[1];\n            if (key) {\n                Object.assign(params, { [camelize(key)]: typecast(value) });\n            }\n        });\n        return params;\n    }\n    get eventTargetName() {\n        return stringifyEventTarget(this.eventTarget);\n    }\n}\nconst defaultEventNames = {\n    \"a\": e => \"click\",\n    \"button\": e => \"click\",\n    \"form\": e => \"submit\",\n    \"details\": e => \"toggle\",\n    \"input\": e => e.getAttribute(\"type\") == \"submit\" ? \"click\" : \"input\",\n    \"select\": e => \"change\",\n    \"textarea\": e => \"input\"\n};\nfunction getDefaultEventNameForElement(element) {\n    const tagName = element.tagName.toLowerCase();\n    if (tagName in defaultEventNames) {\n        return defaultEventNames[tagName](element);\n    }\n}\nfunction error(message) {\n    throw new Error(message);\n}\nfunction typecast(value) {\n    try {\n        return JSON.parse(value);\n    }\n    catch (o_O) {\n        return value;\n    }\n}\n\nclass Binding {\n    constructor(context, action) {\n        this.context = context;\n        this.action = action;\n    }\n    get index() {\n        return this.action.index;\n    }\n    get eventTarget() {\n        return this.action.eventTarget;\n    }\n    get eventOptions() {\n        return this.action.eventOptions;\n    }\n    get identifier() {\n        return this.context.identifier;\n    }\n    handleEvent(event) {\n        if (this.willBeInvokedByEvent(event)) {\n            this.invokeWithEvent(event);\n        }\n    }\n    get eventName() {\n        return this.action.eventName;\n    }\n    get method() {\n        const method = this.controller[this.methodName];\n        if (typeof method == \"function\") {\n            return method;\n        }\n        throw new Error(`Action \"${this.action}\" references undefined method \"${this.methodName}\"`);\n    }\n    invokeWithEvent(event) {\n        const { target, currentTarget } = event;\n        try {\n            const { params } = this.action;\n            const actionEvent = Object.assign(event, { params });\n            this.method.call(this.controller, actionEvent);\n            this.context.logDebugActivity(this.methodName, { event, target, currentTarget, action: this.methodName });\n        }\n        catch (error) {\n            const { identifier, controller, element, index } = this;\n            const detail = { identifier, controller, element, index, event };\n            this.context.handleError(error, `invoking action \"${this.action}\"`, detail);\n        }\n    }\n    willBeInvokedByEvent(event) {\n        const eventTarget = event.target;\n        if (this.element === eventTarget) {\n            return true;\n        }\n        else if (eventTarget instanceof Element && this.element.contains(eventTarget)) {\n            return this.scope.containsElement(eventTarget);\n        }\n        else {\n            return this.scope.containsElement(this.action.element);\n        }\n    }\n    get controller() {\n        return this.context.controller;\n    }\n    get methodName() {\n        return this.action.methodName;\n    }\n    get element() {\n        return this.scope.element;\n    }\n    get scope() {\n        return this.context.scope;\n    }\n}\n\nclass ElementObserver {\n    constructor(element, delegate) {\n        this.mutationObserverInit = { attributes: true, childList: true, subtree: true };\n        this.element = element;\n        this.started = false;\n        this.delegate = delegate;\n        this.elements = new Set;\n        this.mutationObserver = new MutationObserver((mutations) => this.processMutations(mutations));\n    }\n    start() {\n        if (!this.started) {\n            this.started = true;\n            this.mutationObserver.observe(this.element, this.mutationObserverInit);\n            this.refresh();\n        }\n    }\n    pause(callback) {\n        if (this.started) {\n            this.mutationObserver.disconnect();\n            this.started = false;\n        }\n        callback();\n        if (!this.started) {\n            this.mutationObserver.observe(this.element, this.mutationObserverInit);\n            this.started = true;\n        }\n    }\n    stop() {\n        if (this.started) {\n            this.mutationObserver.takeRecords();\n            this.mutationObserver.disconnect();\n            this.started = false;\n        }\n    }\n    refresh() {\n        if (this.started) {\n            const matches = new Set(this.matchElementsInTree());\n            for (const element of Array.from(this.elements)) {\n                if (!matches.has(element)) {\n                    this.removeElement(element);\n                }\n            }\n            for (const element of Array.from(matches)) {\n                this.addElement(element);\n            }\n        }\n    }\n    processMutations(mutations) {\n        if (this.started) {\n            for (const mutation of mutations) {\n                this.processMutation(mutation);\n            }\n        }\n    }\n    processMutation(mutation) {\n        if (mutation.type == \"attributes\") {\n            this.processAttributeChange(mutation.target, mutation.attributeName);\n        }\n        else if (mutation.type == \"childList\") {\n            this.processRemovedNodes(mutation.removedNodes);\n            this.processAddedNodes(mutation.addedNodes);\n        }\n    }\n    processAttributeChange(node, attributeName) {\n        const element = node;\n        if (this.elements.has(element)) {\n            if (this.delegate.elementAttributeChanged && this.matchElement(element)) {\n                this.delegate.elementAttributeChanged(element, attributeName);\n            }\n            else {\n                this.removeElement(element);\n            }\n        }\n        else if (this.matchElement(element)) {\n            this.addElement(element);\n        }\n    }\n    processRemovedNodes(nodes) {\n        for (const node of Array.from(nodes)) {\n            const element = this.elementFromNode(node);\n            if (element) {\n                this.processTree(element, this.removeElement);\n            }\n        }\n    }\n    processAddedNodes(nodes) {\n        for (const node of Array.from(nodes)) {\n            const element = this.elementFromNode(node);\n            if (element && this.elementIsActive(element)) {\n                this.processTree(element, this.addElement);\n            }\n        }\n    }\n    matchElement(element) {\n        return this.delegate.matchElement(element);\n    }\n    matchElementsInTree(tree = this.element) {\n        return this.delegate.matchElementsInTree(tree);\n    }\n    processTree(tree, processor) {\n        for (const element of this.matchElementsInTree(tree)) {\n            processor.call(this, element);\n        }\n    }\n    elementFromNode(node) {\n        if (node.nodeType == Node.ELEMENT_NODE) {\n            return node;\n        }\n    }\n    elementIsActive(element) {\n        if (element.isConnected != this.element.isConnected) {\n            return false;\n        }\n        else {\n            return this.element.contains(element);\n        }\n    }\n    addElement(element) {\n        if (!this.elements.has(element)) {\n            if (this.elementIsActive(element)) {\n                this.elements.add(element);\n                if (this.delegate.elementMatched) {\n                    this.delegate.elementMatched(element);\n                }\n            }\n        }\n    }\n    removeElement(element) {\n        if (this.elements.has(element)) {\n            this.elements.delete(element);\n            if (this.delegate.elementUnmatched) {\n                this.delegate.elementUnmatched(element);\n            }\n        }\n    }\n}\n\nclass AttributeObserver {\n    constructor(element, attributeName, delegate) {\n        this.attributeName = attributeName;\n        this.delegate = delegate;\n        this.elementObserver = new ElementObserver(element, this);\n    }\n    get element() {\n        return this.elementObserver.element;\n    }\n    get selector() {\n        return `[${this.attributeName}]`;\n    }\n    start() {\n        this.elementObserver.start();\n    }\n    pause(callback) {\n        this.elementObserver.pause(callback);\n    }\n    stop() {\n        this.elementObserver.stop();\n    }\n    refresh() {\n        this.elementObserver.refresh();\n    }\n    get started() {\n        return this.elementObserver.started;\n    }\n    matchElement(element) {\n        return element.hasAttribute(this.attributeName);\n    }\n    matchElementsInTree(tree) {\n        const match = this.matchElement(tree) ? [tree] : [];\n        const matches = Array.from(tree.querySelectorAll(this.selector));\n        return match.concat(matches);\n    }\n    elementMatched(element) {\n        if (this.delegate.elementMatchedAttribute) {\n            this.delegate.elementMatchedAttribute(element, this.attributeName);\n        }\n    }\n    elementUnmatched(element) {\n        if (this.delegate.elementUnmatchedAttribute) {\n            this.delegate.elementUnmatchedAttribute(element, this.attributeName);\n        }\n    }\n    elementAttributeChanged(element, attributeName) {\n        if (this.delegate.elementAttributeValueChanged && this.attributeName == attributeName) {\n            this.delegate.elementAttributeValueChanged(element, attributeName);\n        }\n    }\n}\n\nclass StringMapObserver {\n    constructor(element, delegate) {\n        this.element = element;\n        this.delegate = delegate;\n        this.started = false;\n        this.stringMap = new Map;\n        this.mutationObserver = new MutationObserver(mutations => this.processMutations(mutations));\n    }\n    start() {\n        if (!this.started) {\n            this.started = true;\n            this.mutationObserver.observe(this.element, { attributes: true, attributeOldValue: true });\n            this.refresh();\n        }\n    }\n    stop() {\n        if (this.started) {\n            this.mutationObserver.takeRecords();\n            this.mutationObserver.disconnect();\n            this.started = false;\n        }\n    }\n    refresh() {\n        if (this.started) {\n            for (const attributeName of this.knownAttributeNames) {\n                this.refreshAttribute(attributeName, null);\n            }\n        }\n    }\n    processMutations(mutations) {\n        if (this.started) {\n            for (const mutation of mutations) {\n                this.processMutation(mutation);\n            }\n        }\n    }\n    processMutation(mutation) {\n        const attributeName = mutation.attributeName;\n        if (attributeName) {\n            this.refreshAttribute(attributeName, mutation.oldValue);\n        }\n    }\n    refreshAttribute(attributeName, oldValue) {\n        const key = this.delegate.getStringMapKeyForAttribute(attributeName);\n        if (key != null) {\n            if (!this.stringMap.has(attributeName)) {\n                this.stringMapKeyAdded(key, attributeName);\n            }\n            const value = this.element.getAttribute(attributeName);\n            if (this.stringMap.get(attributeName) != value) {\n                this.stringMapValueChanged(value, key, oldValue);\n            }\n            if (value == null) {\n                const oldValue = this.stringMap.get(attributeName);\n                this.stringMap.delete(attributeName);\n                if (oldValue)\n                    this.stringMapKeyRemoved(key, attributeName, oldValue);\n            }\n            else {\n                this.stringMap.set(attributeName, value);\n            }\n        }\n    }\n    stringMapKeyAdded(key, attributeName) {\n        if (this.delegate.stringMapKeyAdded) {\n            this.delegate.stringMapKeyAdded(key, attributeName);\n        }\n    }\n    stringMapValueChanged(value, key, oldValue) {\n        if (this.delegate.stringMapValueChanged) {\n            this.delegate.stringMapValueChanged(value, key, oldValue);\n        }\n    }\n    stringMapKeyRemoved(key, attributeName, oldValue) {\n        if (this.delegate.stringMapKeyRemoved) {\n            this.delegate.stringMapKeyRemoved(key, attributeName, oldValue);\n        }\n    }\n    get knownAttributeNames() {\n        return Array.from(new Set(this.currentAttributeNames.concat(this.recordedAttributeNames)));\n    }\n    get currentAttributeNames() {\n        return Array.from(this.element.attributes).map(attribute => attribute.name);\n    }\n    get recordedAttributeNames() {\n        return Array.from(this.stringMap.keys());\n    }\n}\n\nfunction add(map, key, value) {\n    fetch(map, key).add(value);\n}\nfunction del(map, key, value) {\n    fetch(map, key).delete(value);\n    prune(map, key);\n}\nfunction fetch(map, key) {\n    let values = map.get(key);\n    if (!values) {\n        values = new Set();\n        map.set(key, values);\n    }\n    return values;\n}\nfunction prune(map, key) {\n    const values = map.get(key);\n    if (values != null && values.size == 0) {\n        map.delete(key);\n    }\n}\n\nclass Multimap {\n    constructor() {\n        this.valuesByKey = new Map();\n    }\n    get keys() {\n        return Array.from(this.valuesByKey.keys());\n    }\n    get values() {\n        const sets = Array.from(this.valuesByKey.values());\n        return sets.reduce((values, set) => values.concat(Array.from(set)), []);\n    }\n    get size() {\n        const sets = Array.from(this.valuesByKey.values());\n        return sets.reduce((size, set) => size + set.size, 0);\n    }\n    add(key, value) {\n        add(this.valuesByKey, key, value);\n    }\n    delete(key, value) {\n        del(this.valuesByKey, key, value);\n    }\n    has(key, value) {\n        const values = this.valuesByKey.get(key);\n        return values != null && values.has(value);\n    }\n    hasKey(key) {\n        return this.valuesByKey.has(key);\n    }\n    hasValue(value) {\n        const sets = Array.from(this.valuesByKey.values());\n        return sets.some(set => set.has(value));\n    }\n    getValuesForKey(key) {\n        const values = this.valuesByKey.get(key);\n        return values ? Array.from(values) : [];\n    }\n    getKeysForValue(value) {\n        return Array.from(this.valuesByKey)\n            .filter(([key, values]) => values.has(value))\n            .map(([key, values]) => key);\n    }\n}\n\nclass IndexedMultimap extends Multimap {\n    constructor() {\n        super();\n        this.keysByValue = new Map;\n    }\n    get values() {\n        return Array.from(this.keysByValue.keys());\n    }\n    add(key, value) {\n        super.add(key, value);\n        add(this.keysByValue, value, key);\n    }\n    delete(key, value) {\n        super.delete(key, value);\n        del(this.keysByValue, value, key);\n    }\n    hasValue(value) {\n        return this.keysByValue.has(value);\n    }\n    getKeysForValue(value) {\n        const set = this.keysByValue.get(value);\n        return set ? Array.from(set) : [];\n    }\n}\n\nclass TokenListObserver {\n    constructor(element, attributeName, delegate) {\n        this.attributeObserver = new AttributeObserver(element, attributeName, this);\n        this.delegate = delegate;\n        this.tokensByElement = new Multimap;\n    }\n    get started() {\n        return this.attributeObserver.started;\n    }\n    start() {\n        this.attributeObserver.start();\n    }\n    pause(callback) {\n        this.attributeObserver.pause(callback);\n    }\n    stop() {\n        this.attributeObserver.stop();\n    }\n    refresh() {\n        this.attributeObserver.refresh();\n    }\n    get element() {\n        return this.attributeObserver.element;\n    }\n    get attributeName() {\n        return this.attributeObserver.attributeName;\n    }\n    elementMatchedAttribute(element) {\n        this.tokensMatched(this.readTokensForElement(element));\n    }\n    elementAttributeValueChanged(element) {\n        const [unmatchedTokens, matchedTokens] = this.refreshTokensForElement(element);\n        this.tokensUnmatched(unmatchedTokens);\n        this.tokensMatched(matchedTokens);\n    }\n    elementUnmatchedAttribute(element) {\n        this.tokensUnmatched(this.tokensByElement.getValuesForKey(element));\n    }\n    tokensMatched(tokens) {\n        tokens.forEach(token => this.tokenMatched(token));\n    }\n    tokensUnmatched(tokens) {\n        tokens.forEach(token => this.tokenUnmatched(token));\n    }\n    tokenMatched(token) {\n        this.delegate.tokenMatched(token);\n        this.tokensByElement.add(token.element, token);\n    }\n    tokenUnmatched(token) {\n        this.delegate.tokenUnmatched(token);\n        this.tokensByElement.delete(token.element, token);\n    }\n    refreshTokensForElement(element) {\n        const previousTokens = this.tokensByElement.getValuesForKey(element);\n        const currentTokens = this.readTokensForElement(element);\n        const firstDifferingIndex = zip(previousTokens, currentTokens)\n            .findIndex(([previousToken, currentToken]) => !tokensAreEqual(previousToken, currentToken));\n        if (firstDifferingIndex == -1) {\n            return [[], []];\n        }\n        else {\n            return [previousTokens.slice(firstDifferingIndex), currentTokens.slice(firstDifferingIndex)];\n        }\n    }\n    readTokensForElement(element) {\n        const attributeName = this.attributeName;\n        const tokenString = element.getAttribute(attributeName) || \"\";\n        return parseTokenString(tokenString, element, attributeName);\n    }\n}\nfunction parseTokenString(tokenString, element, attributeName) {\n    return tokenString.trim().split(/\\s+/).filter(content => content.length)\n        .map((content, index) => ({ element, attributeName, content, index }));\n}\nfunction zip(left, right) {\n    const length = Math.max(left.length, right.length);\n    return Array.from({ length }, (_, index) => [left[index], right[index]]);\n}\nfunction tokensAreEqual(left, right) {\n    return left && right && left.index == right.index && left.content == right.content;\n}\n\nclass ValueListObserver {\n    constructor(element, attributeName, delegate) {\n        this.tokenListObserver = new TokenListObserver(element, attributeName, this);\n        this.delegate = delegate;\n        this.parseResultsByToken = new WeakMap;\n        this.valuesByTokenByElement = new WeakMap;\n    }\n    get started() {\n        return this.tokenListObserver.started;\n    }\n    start() {\n        this.tokenListObserver.start();\n    }\n    stop() {\n        this.tokenListObserver.stop();\n    }\n    refresh() {\n        this.tokenListObserver.refresh();\n    }\n    get element() {\n        return this.tokenListObserver.element;\n    }\n    get attributeName() {\n        return this.tokenListObserver.attributeName;\n    }\n    tokenMatched(token) {\n        const { element } = token;\n        const { value } = this.fetchParseResultForToken(token);\n        if (value) {\n            this.fetchValuesByTokenForElement(element).set(token, value);\n            this.delegate.elementMatchedValue(element, value);\n        }\n    }\n    tokenUnmatched(token) {\n        const { element } = token;\n        const { value } = this.fetchParseResultForToken(token);\n        if (value) {\n            this.fetchValuesByTokenForElement(element).delete(token);\n            this.delegate.elementUnmatchedValue(element, value);\n        }\n    }\n    fetchParseResultForToken(token) {\n        let parseResult = this.parseResultsByToken.get(token);\n        if (!parseResult) {\n            parseResult = this.parseToken(token);\n            this.parseResultsByToken.set(token, parseResult);\n        }\n        return parseResult;\n    }\n    fetchValuesByTokenForElement(element) {\n        let valuesByToken = this.valuesByTokenByElement.get(element);\n        if (!valuesByToken) {\n            valuesByToken = new Map;\n            this.valuesByTokenByElement.set(element, valuesByToken);\n        }\n        return valuesByToken;\n    }\n    parseToken(token) {\n        try {\n            const value = this.delegate.parseValueForToken(token);\n            return { value };\n        }\n        catch (error) {\n            return { error };\n        }\n    }\n}\n\nclass BindingObserver {\n    constructor(context, delegate) {\n        this.context = context;\n        this.delegate = delegate;\n        this.bindingsByAction = new Map;\n    }\n    start() {\n        if (!this.valueListObserver) {\n            this.valueListObserver = new ValueListObserver(this.element, this.actionAttribute, this);\n            this.valueListObserver.start();\n        }\n    }\n    stop() {\n        if (this.valueListObserver) {\n            this.valueListObserver.stop();\n            delete this.valueListObserver;\n            this.disconnectAllActions();\n        }\n    }\n    get element() {\n        return this.context.element;\n    }\n    get identifier() {\n        return this.context.identifier;\n    }\n    get actionAttribute() {\n        return this.schema.actionAttribute;\n    }\n    get schema() {\n        return this.context.schema;\n    }\n    get bindings() {\n        return Array.from(this.bindingsByAction.values());\n    }\n    connectAction(action) {\n        const binding = new Binding(this.context, action);\n        this.bindingsByAction.set(action, binding);\n        this.delegate.bindingConnected(binding);\n    }\n    disconnectAction(action) {\n        const binding = this.bindingsByAction.get(action);\n        if (binding) {\n            this.bindingsByAction.delete(action);\n            this.delegate.bindingDisconnected(binding);\n        }\n    }\n    disconnectAllActions() {\n        this.bindings.forEach(binding => this.delegate.bindingDisconnected(binding));\n        this.bindingsByAction.clear();\n    }\n    parseValueForToken(token) {\n        const action = Action.forToken(token);\n        if (action.identifier == this.identifier) {\n            return action;\n        }\n    }\n    elementMatchedValue(element, action) {\n        this.connectAction(action);\n    }\n    elementUnmatchedValue(element, action) {\n        this.disconnectAction(action);\n    }\n}\n\nclass ValueObserver {\n    constructor(context, receiver) {\n        this.context = context;\n        this.receiver = receiver;\n        this.stringMapObserver = new StringMapObserver(this.element, this);\n        this.valueDescriptorMap = this.controller.valueDescriptorMap;\n        this.invokeChangedCallbacksForDefaultValues();\n    }\n    start() {\n        this.stringMapObserver.start();\n    }\n    stop() {\n        this.stringMapObserver.stop();\n    }\n    get element() {\n        return this.context.element;\n    }\n    get controller() {\n        return this.context.controller;\n    }\n    getStringMapKeyForAttribute(attributeName) {\n        if (attributeName in this.valueDescriptorMap) {\n            return this.valueDescriptorMap[attributeName].name;\n        }\n    }\n    stringMapKeyAdded(key, attributeName) {\n        const descriptor = this.valueDescriptorMap[attributeName];\n        if (!this.hasValue(key)) {\n            this.invokeChangedCallback(key, descriptor.writer(this.receiver[key]), descriptor.writer(descriptor.defaultValue));\n        }\n    }\n    stringMapValueChanged(value, name, oldValue) {\n        const descriptor = this.valueDescriptorNameMap[name];\n        if (value === null)\n            return;\n        if (oldValue === null) {\n            oldValue = descriptor.writer(descriptor.defaultValue);\n        }\n        this.invokeChangedCallback(name, value, oldValue);\n    }\n    stringMapKeyRemoved(key, attributeName, oldValue) {\n        const descriptor = this.valueDescriptorNameMap[key];\n        if (this.hasValue(key)) {\n            this.invokeChangedCallback(key, descriptor.writer(this.receiver[key]), oldValue);\n        }\n        else {\n            this.invokeChangedCallback(key, descriptor.writer(descriptor.defaultValue), oldValue);\n        }\n    }\n    invokeChangedCallbacksForDefaultValues() {\n        for (const { key, name, defaultValue, writer } of this.valueDescriptors) {\n            if (defaultValue != undefined && !this.controller.data.has(key)) {\n                this.invokeChangedCallback(name, writer(defaultValue), undefined);\n            }\n        }\n    }\n    invokeChangedCallback(name, rawValue, rawOldValue) {\n        const changedMethodName = `${name}Changed`;\n        const changedMethod = this.receiver[changedMethodName];\n        if (typeof changedMethod == \"function\") {\n            const descriptor = this.valueDescriptorNameMap[name];\n            const value = descriptor.reader(rawValue);\n            let oldValue = rawOldValue;\n            if (rawOldValue) {\n                oldValue = descriptor.reader(rawOldValue);\n            }\n            changedMethod.call(this.receiver, value, oldValue);\n        }\n    }\n    get valueDescriptors() {\n        const { valueDescriptorMap } = this;\n        return Object.keys(valueDescriptorMap).map(key => valueDescriptorMap[key]);\n    }\n    get valueDescriptorNameMap() {\n        const descriptors = {};\n        Object.keys(this.valueDescriptorMap).forEach(key => {\n            const descriptor = this.valueDescriptorMap[key];\n            descriptors[descriptor.name] = descriptor;\n        });\n        return descriptors;\n    }\n    hasValue(attributeName) {\n        const descriptor = this.valueDescriptorNameMap[attributeName];\n        const hasMethodName = `has${capitalize(descriptor.name)}`;\n        return this.receiver[hasMethodName];\n    }\n}\n\nclass TargetObserver {\n    constructor(context, delegate) {\n        this.context = context;\n        this.delegate = delegate;\n        this.targetsByName = new Multimap;\n    }\n    start() {\n        if (!this.tokenListObserver) {\n            this.tokenListObserver = new TokenListObserver(this.element, this.attributeName, this);\n            this.tokenListObserver.start();\n        }\n    }\n    stop() {\n        if (this.tokenListObserver) {\n            this.disconnectAllTargets();\n            this.tokenListObserver.stop();\n            delete this.tokenListObserver;\n        }\n    }\n    tokenMatched({ element, content: name }) {\n        if (this.scope.containsElement(element)) {\n            this.connectTarget(element, name);\n        }\n    }\n    tokenUnmatched({ element, content: name }) {\n        this.disconnectTarget(element, name);\n    }\n    connectTarget(element, name) {\n        var _a;\n        if (!this.targetsByName.has(name, element)) {\n            this.targetsByName.add(name, element);\n            (_a = this.tokenListObserver) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.targetConnected(element, name));\n        }\n    }\n    disconnectTarget(element, name) {\n        var _a;\n        if (this.targetsByName.has(name, element)) {\n            this.targetsByName.delete(name, element);\n            (_a = this.tokenListObserver) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.targetDisconnected(element, name));\n        }\n    }\n    disconnectAllTargets() {\n        for (const name of this.targetsByName.keys) {\n            for (const element of this.targetsByName.getValuesForKey(name)) {\n                this.disconnectTarget(element, name);\n            }\n        }\n    }\n    get attributeName() {\n        return `data-${this.context.identifier}-target`;\n    }\n    get element() {\n        return this.context.element;\n    }\n    get scope() {\n        return this.context.scope;\n    }\n}\n\nclass Context {\n    constructor(module, scope) {\n        this.logDebugActivity = (functionName, detail = {}) => {\n            const { identifier, controller, element } = this;\n            detail = Object.assign({ identifier, controller, element }, detail);\n            this.application.logDebugActivity(this.identifier, functionName, detail);\n        };\n        this.module = module;\n        this.scope = scope;\n        this.controller = new module.controllerConstructor(this);\n        this.bindingObserver = new BindingObserver(this, this.dispatcher);\n        this.valueObserver = new ValueObserver(this, this.controller);\n        this.targetObserver = new TargetObserver(this, this);\n        try {\n            this.controller.initialize();\n            this.logDebugActivity(\"initialize\");\n        }\n        catch (error) {\n            this.handleError(error, \"initializing controller\");\n        }\n    }\n    connect() {\n        this.bindingObserver.start();\n        this.valueObserver.start();\n        this.targetObserver.start();\n        try {\n            this.controller.connect();\n            this.logDebugActivity(\"connect\");\n        }\n        catch (error) {\n            this.handleError(error, \"connecting controller\");\n        }\n    }\n    disconnect() {\n        try {\n            this.controller.disconnect();\n            this.logDebugActivity(\"disconnect\");\n        }\n        catch (error) {\n            this.handleError(error, \"disconnecting controller\");\n        }\n        this.targetObserver.stop();\n        this.valueObserver.stop();\n        this.bindingObserver.stop();\n    }\n    get application() {\n        return this.module.application;\n    }\n    get identifier() {\n        return this.module.identifier;\n    }\n    get schema() {\n        return this.application.schema;\n    }\n    get dispatcher() {\n        return this.application.dispatcher;\n    }\n    get element() {\n        return this.scope.element;\n    }\n    get parentElement() {\n        return this.element.parentElement;\n    }\n    handleError(error, message, detail = {}) {\n        const { identifier, controller, element } = this;\n        detail = Object.assign({ identifier, controller, element }, detail);\n        this.application.handleError(error, `Error ${message}`, detail);\n    }\n    targetConnected(element, name) {\n        this.invokeControllerMethod(`${name}TargetConnected`, element);\n    }\n    targetDisconnected(element, name) {\n        this.invokeControllerMethod(`${name}TargetDisconnected`, element);\n    }\n    invokeControllerMethod(methodName, ...args) {\n        const controller = this.controller;\n        if (typeof controller[methodName] == \"function\") {\n            controller[methodName](...args);\n        }\n    }\n}\n\nfunction readInheritableStaticArrayValues(constructor, propertyName) {\n    const ancestors = getAncestorsForConstructor(constructor);\n    return Array.from(ancestors.reduce((values, constructor) => {\n        getOwnStaticArrayValues(constructor, propertyName).forEach(name => values.add(name));\n        return values;\n    }, new Set));\n}\nfunction readInheritableStaticObjectPairs(constructor, propertyName) {\n    const ancestors = getAncestorsForConstructor(constructor);\n    return ancestors.reduce((pairs, constructor) => {\n        pairs.push(...getOwnStaticObjectPairs(constructor, propertyName));\n        return pairs;\n    }, []);\n}\nfunction getAncestorsForConstructor(constructor) {\n    const ancestors = [];\n    while (constructor) {\n        ancestors.push(constructor);\n        constructor = Object.getPrototypeOf(constructor);\n    }\n    return ancestors.reverse();\n}\nfunction getOwnStaticArrayValues(constructor, propertyName) {\n    const definition = constructor[propertyName];\n    return Array.isArray(definition) ? definition : [];\n}\nfunction getOwnStaticObjectPairs(constructor, propertyName) {\n    const definition = constructor[propertyName];\n    return definition ? Object.keys(definition).map(key => [key, definition[key]]) : [];\n}\n\nfunction bless(constructor) {\n    return shadow(constructor, getBlessedProperties(constructor));\n}\nfunction shadow(constructor, properties) {\n    const shadowConstructor = extend(constructor);\n    const shadowProperties = getShadowProperties(constructor.prototype, properties);\n    Object.defineProperties(shadowConstructor.prototype, shadowProperties);\n    return shadowConstructor;\n}\nfunction getBlessedProperties(constructor) {\n    const blessings = readInheritableStaticArrayValues(constructor, \"blessings\");\n    return blessings.reduce((blessedProperties, blessing) => {\n        const properties = blessing(constructor);\n        for (const key in properties) {\n            const descriptor = blessedProperties[key] || {};\n            blessedProperties[key] = Object.assign(descriptor, properties[key]);\n        }\n        return blessedProperties;\n    }, {});\n}\nfunction getShadowProperties(prototype, properties) {\n    return getOwnKeys(properties).reduce((shadowProperties, key) => {\n        const descriptor = getShadowedDescriptor(prototype, properties, key);\n        if (descriptor) {\n            Object.assign(shadowProperties, { [key]: descriptor });\n        }\n        return shadowProperties;\n    }, {});\n}\nfunction getShadowedDescriptor(prototype, properties, key) {\n    const shadowingDescriptor = Object.getOwnPropertyDescriptor(prototype, key);\n    const shadowedByValue = shadowingDescriptor && \"value\" in shadowingDescriptor;\n    if (!shadowedByValue) {\n        const descriptor = Object.getOwnPropertyDescriptor(properties, key).value;\n        if (shadowingDescriptor) {\n            descriptor.get = shadowingDescriptor.get || descriptor.get;\n            descriptor.set = shadowingDescriptor.set || descriptor.set;\n        }\n        return descriptor;\n    }\n}\nconst getOwnKeys = (() => {\n    if (typeof Object.getOwnPropertySymbols == \"function\") {\n        return (object) => [\n            ...Object.getOwnPropertyNames(object),\n            ...Object.getOwnPropertySymbols(object)\n        ];\n    }\n    else {\n        return Object.getOwnPropertyNames;\n    }\n})();\nconst extend = (() => {\n    function extendWithReflect(constructor) {\n        function extended() {\n            return Reflect.construct(constructor, arguments, new.target);\n        }\n        extended.prototype = Object.create(constructor.prototype, {\n            constructor: { value: extended }\n        });\n        Reflect.setPrototypeOf(extended, constructor);\n        return extended;\n    }\n    function testReflectExtension() {\n        const a = function () { this.a.call(this); };\n        const b = extendWithReflect(a);\n        b.prototype.a = function () { };\n        return new b;\n    }\n    try {\n        testReflectExtension();\n        return extendWithReflect;\n    }\n    catch (error) {\n        return (constructor) => class extended extends constructor {\n        };\n    }\n})();\n\nfunction blessDefinition(definition) {\n    return {\n        identifier: definition.identifier,\n        controllerConstructor: bless(definition.controllerConstructor)\n    };\n}\n\nclass Module {\n    constructor(application, definition) {\n        this.application = application;\n        this.definition = blessDefinition(definition);\n        this.contextsByScope = new WeakMap;\n        this.connectedContexts = new Set;\n    }\n    get identifier() {\n        return this.definition.identifier;\n    }\n    get controllerConstructor() {\n        return this.definition.controllerConstructor;\n    }\n    get contexts() {\n        return Array.from(this.connectedContexts);\n    }\n    connectContextForScope(scope) {\n        const context = this.fetchContextForScope(scope);\n        this.connectedContexts.add(context);\n        context.connect();\n    }\n    disconnectContextForScope(scope) {\n        const context = this.contextsByScope.get(scope);\n        if (context) {\n            this.connectedContexts.delete(context);\n            context.disconnect();\n        }\n    }\n    fetchContextForScope(scope) {\n        let context = this.contextsByScope.get(scope);\n        if (!context) {\n            context = new Context(this, scope);\n            this.contextsByScope.set(scope, context);\n        }\n        return context;\n    }\n}\n\nclass ClassMap {\n    constructor(scope) {\n        this.scope = scope;\n    }\n    has(name) {\n        return this.data.has(this.getDataKey(name));\n    }\n    get(name) {\n        return this.getAll(name)[0];\n    }\n    getAll(name) {\n        const tokenString = this.data.get(this.getDataKey(name)) || \"\";\n        return tokenize(tokenString);\n    }\n    getAttributeName(name) {\n        return this.data.getAttributeNameForKey(this.getDataKey(name));\n    }\n    getDataKey(name) {\n        return `${name}-class`;\n    }\n    get data() {\n        return this.scope.data;\n    }\n}\n\nclass DataMap {\n    constructor(scope) {\n        this.scope = scope;\n    }\n    get element() {\n        return this.scope.element;\n    }\n    get identifier() {\n        return this.scope.identifier;\n    }\n    get(key) {\n        const name = this.getAttributeNameForKey(key);\n        return this.element.getAttribute(name);\n    }\n    set(key, value) {\n        const name = this.getAttributeNameForKey(key);\n        this.element.setAttribute(name, value);\n        return this.get(key);\n    }\n    has(key) {\n        const name = this.getAttributeNameForKey(key);\n        return this.element.hasAttribute(name);\n    }\n    delete(key) {\n        if (this.has(key)) {\n            const name = this.getAttributeNameForKey(key);\n            this.element.removeAttribute(name);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    getAttributeNameForKey(key) {\n        return `data-${this.identifier}-${dasherize(key)}`;\n    }\n}\n\nclass Guide {\n    constructor(logger) {\n        this.warnedKeysByObject = new WeakMap;\n        this.logger = logger;\n    }\n    warn(object, key, message) {\n        let warnedKeys = this.warnedKeysByObject.get(object);\n        if (!warnedKeys) {\n            warnedKeys = new Set;\n            this.warnedKeysByObject.set(object, warnedKeys);\n        }\n        if (!warnedKeys.has(key)) {\n            warnedKeys.add(key);\n            this.logger.warn(message, object);\n        }\n    }\n}\n\nfunction attributeValueContainsToken(attributeName, token) {\n    return `[${attributeName}~=\"${token}\"]`;\n}\n\nclass TargetSet {\n    constructor(scope) {\n        this.scope = scope;\n    }\n    get element() {\n        return this.scope.element;\n    }\n    get identifier() {\n        return this.scope.identifier;\n    }\n    get schema() {\n        return this.scope.schema;\n    }\n    has(targetName) {\n        return this.find(targetName) != null;\n    }\n    find(...targetNames) {\n        return targetNames.reduce((target, targetName) => target\n            || this.findTarget(targetName)\n            || this.findLegacyTarget(targetName), undefined);\n    }\n    findAll(...targetNames) {\n        return targetNames.reduce((targets, targetName) => [\n            ...targets,\n            ...this.findAllTargets(targetName),\n            ...this.findAllLegacyTargets(targetName)\n        ], []);\n    }\n    findTarget(targetName) {\n        const selector = this.getSelectorForTargetName(targetName);\n        return this.scope.findElement(selector);\n    }\n    findAllTargets(targetName) {\n        const selector = this.getSelectorForTargetName(targetName);\n        return this.scope.findAllElements(selector);\n    }\n    getSelectorForTargetName(targetName) {\n        const attributeName = this.schema.targetAttributeForScope(this.identifier);\n        return attributeValueContainsToken(attributeName, targetName);\n    }\n    findLegacyTarget(targetName) {\n        const selector = this.getLegacySelectorForTargetName(targetName);\n        return this.deprecate(this.scope.findElement(selector), targetName);\n    }\n    findAllLegacyTargets(targetName) {\n        const selector = this.getLegacySelectorForTargetName(targetName);\n        return this.scope.findAllElements(selector).map(element => this.deprecate(element, targetName));\n    }\n    getLegacySelectorForTargetName(targetName) {\n        const targetDescriptor = `${this.identifier}.${targetName}`;\n        return attributeValueContainsToken(this.schema.targetAttribute, targetDescriptor);\n    }\n    deprecate(element, targetName) {\n        if (element) {\n            const { identifier } = this;\n            const attributeName = this.schema.targetAttribute;\n            const revisedAttributeName = this.schema.targetAttributeForScope(identifier);\n            this.guide.warn(element, `target:${targetName}`, `Please replace ${attributeName}=\"${identifier}.${targetName}\" with ${revisedAttributeName}=\"${targetName}\". ` +\n                `The ${attributeName} attribute is deprecated and will be removed in a future version of Stimulus.`);\n        }\n        return element;\n    }\n    get guide() {\n        return this.scope.guide;\n    }\n}\n\nclass Scope {\n    constructor(schema, element, identifier, logger) {\n        this.targets = new TargetSet(this);\n        this.classes = new ClassMap(this);\n        this.data = new DataMap(this);\n        this.containsElement = (element) => {\n            return element.closest(this.controllerSelector) === this.element;\n        };\n        this.schema = schema;\n        this.element = element;\n        this.identifier = identifier;\n        this.guide = new Guide(logger);\n    }\n    findElement(selector) {\n        return this.element.matches(selector)\n            ? this.element\n            : this.queryElements(selector).find(this.containsElement);\n    }\n    findAllElements(selector) {\n        return [\n            ...this.element.matches(selector) ? [this.element] : [],\n            ...this.queryElements(selector).filter(this.containsElement)\n        ];\n    }\n    queryElements(selector) {\n        return Array.from(this.element.querySelectorAll(selector));\n    }\n    get controllerSelector() {\n        return attributeValueContainsToken(this.schema.controllerAttribute, this.identifier);\n    }\n}\n\nclass ScopeObserver {\n    constructor(element, schema, delegate) {\n        this.element = element;\n        this.schema = schema;\n        this.delegate = delegate;\n        this.valueListObserver = new ValueListObserver(this.element, this.controllerAttribute, this);\n        this.scopesByIdentifierByElement = new WeakMap;\n        this.scopeReferenceCounts = new WeakMap;\n    }\n    start() {\n        this.valueListObserver.start();\n    }\n    stop() {\n        this.valueListObserver.stop();\n    }\n    get controllerAttribute() {\n        return this.schema.controllerAttribute;\n    }\n    parseValueForToken(token) {\n        const { element, content: identifier } = token;\n        const scopesByIdentifier = this.fetchScopesByIdentifierForElement(element);\n        let scope = scopesByIdentifier.get(identifier);\n        if (!scope) {\n            scope = this.delegate.createScopeForElementAndIdentifier(element, identifier);\n            scopesByIdentifier.set(identifier, scope);\n        }\n        return scope;\n    }\n    elementMatchedValue(element, value) {\n        const referenceCount = (this.scopeReferenceCounts.get(value) || 0) + 1;\n        this.scopeReferenceCounts.set(value, referenceCount);\n        if (referenceCount == 1) {\n            this.delegate.scopeConnected(value);\n        }\n    }\n    elementUnmatchedValue(element, value) {\n        const referenceCount = this.scopeReferenceCounts.get(value);\n        if (referenceCount) {\n            this.scopeReferenceCounts.set(value, referenceCount - 1);\n            if (referenceCount == 1) {\n                this.delegate.scopeDisconnected(value);\n            }\n        }\n    }\n    fetchScopesByIdentifierForElement(element) {\n        let scopesByIdentifier = this.scopesByIdentifierByElement.get(element);\n        if (!scopesByIdentifier) {\n            scopesByIdentifier = new Map;\n            this.scopesByIdentifierByElement.set(element, scopesByIdentifier);\n        }\n        return scopesByIdentifier;\n    }\n}\n\nclass Router {\n    constructor(application) {\n        this.application = application;\n        this.scopeObserver = new ScopeObserver(this.element, this.schema, this);\n        this.scopesByIdentifier = new Multimap;\n        this.modulesByIdentifier = new Map;\n    }\n    get element() {\n        return this.application.element;\n    }\n    get schema() {\n        return this.application.schema;\n    }\n    get logger() {\n        return this.application.logger;\n    }\n    get controllerAttribute() {\n        return this.schema.controllerAttribute;\n    }\n    get modules() {\n        return Array.from(this.modulesByIdentifier.values());\n    }\n    get contexts() {\n        return this.modules.reduce((contexts, module) => contexts.concat(module.contexts), []);\n    }\n    start() {\n        this.scopeObserver.start();\n    }\n    stop() {\n        this.scopeObserver.stop();\n    }\n    loadDefinition(definition) {\n        this.unloadIdentifier(definition.identifier);\n        const module = new Module(this.application, definition);\n        this.connectModule(module);\n    }\n    unloadIdentifier(identifier) {\n        const module = this.modulesByIdentifier.get(identifier);\n        if (module) {\n            this.disconnectModule(module);\n        }\n    }\n    getContextForElementAndIdentifier(element, identifier) {\n        const module = this.modulesByIdentifier.get(identifier);\n        if (module) {\n            return module.contexts.find(context => context.element == element);\n        }\n    }\n    handleError(error, message, detail) {\n        this.application.handleError(error, message, detail);\n    }\n    createScopeForElementAndIdentifier(element, identifier) {\n        return new Scope(this.schema, element, identifier, this.logger);\n    }\n    scopeConnected(scope) {\n        this.scopesByIdentifier.add(scope.identifier, scope);\n        const module = this.modulesByIdentifier.get(scope.identifier);\n        if (module) {\n            module.connectContextForScope(scope);\n        }\n    }\n    scopeDisconnected(scope) {\n        this.scopesByIdentifier.delete(scope.identifier, scope);\n        const module = this.modulesByIdentifier.get(scope.identifier);\n        if (module) {\n            module.disconnectContextForScope(scope);\n        }\n    }\n    connectModule(module) {\n        this.modulesByIdentifier.set(module.identifier, module);\n        const scopes = this.scopesByIdentifier.getValuesForKey(module.identifier);\n        scopes.forEach(scope => module.connectContextForScope(scope));\n    }\n    disconnectModule(module) {\n        this.modulesByIdentifier.delete(module.identifier);\n        const scopes = this.scopesByIdentifier.getValuesForKey(module.identifier);\n        scopes.forEach(scope => module.disconnectContextForScope(scope));\n    }\n}\n\nconst defaultSchema = {\n    controllerAttribute: \"data-controller\",\n    actionAttribute: \"data-action\",\n    targetAttribute: \"data-target\",\n    targetAttributeForScope: identifier => `data-${identifier}-target`\n};\n\nclass Application {\n    constructor(element = document.documentElement, schema = defaultSchema) {\n        this.logger = console;\n        this.debug = false;\n        this.logDebugActivity = (identifier, functionName, detail = {}) => {\n            if (this.debug) {\n                this.logFormattedMessage(identifier, functionName, detail);\n            }\n        };\n        this.element = element;\n        this.schema = schema;\n        this.dispatcher = new Dispatcher(this);\n        this.router = new Router(this);\n    }\n    static start(element, schema) {\n        const application = new Application(element, schema);\n        application.start();\n        return application;\n    }\n    async start() {\n        await domReady();\n        this.logDebugActivity(\"application\", \"starting\");\n        this.dispatcher.start();\n        this.router.start();\n        this.logDebugActivity(\"application\", \"start\");\n    }\n    stop() {\n        this.logDebugActivity(\"application\", \"stopping\");\n        this.dispatcher.stop();\n        this.router.stop();\n        this.logDebugActivity(\"application\", \"stop\");\n    }\n    register(identifier, controllerConstructor) {\n        if (controllerConstructor.shouldLoad) {\n            this.load({ identifier, controllerConstructor });\n        }\n    }\n    load(head, ...rest) {\n        const definitions = Array.isArray(head) ? head : [head, ...rest];\n        definitions.forEach(definition => this.router.loadDefinition(definition));\n    }\n    unload(head, ...rest) {\n        const identifiers = Array.isArray(head) ? head : [head, ...rest];\n        identifiers.forEach(identifier => this.router.unloadIdentifier(identifier));\n    }\n    get controllers() {\n        return this.router.contexts.map(context => context.controller);\n    }\n    getControllerForElementAndIdentifier(element, identifier) {\n        const context = this.router.getContextForElementAndIdentifier(element, identifier);\n        return context ? context.controller : null;\n    }\n    handleError(error, message, detail) {\n        var _a;\n        this.logger.error(`%s\\n\\n%o\\n\\n%o`, message, error, detail);\n        (_a = window.onerror) === null || _a === void 0 ? void 0 : _a.call(window, message, \"\", 0, 0, error);\n    }\n    logFormattedMessage(identifier, functionName, detail = {}) {\n        detail = Object.assign({ application: this }, detail);\n        this.logger.groupCollapsed(`${identifier} #${functionName}`);\n        this.logger.log(\"details:\", Object.assign({}, detail));\n        this.logger.groupEnd();\n    }\n}\nfunction domReady() {\n    return new Promise(resolve => {\n        if (document.readyState == \"loading\") {\n            document.addEventListener(\"DOMContentLoaded\", () => resolve());\n        }\n        else {\n            resolve();\n        }\n    });\n}\n\nfunction ClassPropertiesBlessing(constructor) {\n    const classes = readInheritableStaticArrayValues(constructor, \"classes\");\n    return classes.reduce((properties, classDefinition) => {\n        return Object.assign(properties, propertiesForClassDefinition(classDefinition));\n    }, {});\n}\nfunction propertiesForClassDefinition(key) {\n    return {\n        [`${key}Class`]: {\n            get() {\n                const { classes } = this;\n                if (classes.has(key)) {\n                    return classes.get(key);\n                }\n                else {\n                    const attribute = classes.getAttributeName(key);\n                    throw new Error(`Missing attribute \"${attribute}\"`);\n                }\n            }\n        },\n        [`${key}Classes`]: {\n            get() {\n                return this.classes.getAll(key);\n            }\n        },\n        [`has${capitalize(key)}Class`]: {\n            get() {\n                return this.classes.has(key);\n            }\n        }\n    };\n}\n\nfunction TargetPropertiesBlessing(constructor) {\n    const targets = readInheritableStaticArrayValues(constructor, \"targets\");\n    return targets.reduce((properties, targetDefinition) => {\n        return Object.assign(properties, propertiesForTargetDefinition(targetDefinition));\n    }, {});\n}\nfunction propertiesForTargetDefinition(name) {\n    return {\n        [`${name}Target`]: {\n            get() {\n                const target = this.targets.find(name);\n                if (target) {\n                    return target;\n                }\n                else {\n                    throw new Error(`Missing target element \"${name}\" for \"${this.identifier}\" controller`);\n                }\n            }\n        },\n        [`${name}Targets`]: {\n            get() {\n                return this.targets.findAll(name);\n            }\n        },\n        [`has${capitalize(name)}Target`]: {\n            get() {\n                return this.targets.has(name);\n            }\n        }\n    };\n}\n\nfunction ValuePropertiesBlessing(constructor) {\n    const valueDefinitionPairs = readInheritableStaticObjectPairs(constructor, \"values\");\n    const propertyDescriptorMap = {\n        valueDescriptorMap: {\n            get() {\n                return valueDefinitionPairs.reduce((result, valueDefinitionPair) => {\n                    const valueDescriptor = parseValueDefinitionPair(valueDefinitionPair);\n                    const attributeName = this.data.getAttributeNameForKey(valueDescriptor.key);\n                    return Object.assign(result, { [attributeName]: valueDescriptor });\n                }, {});\n            }\n        }\n    };\n    return valueDefinitionPairs.reduce((properties, valueDefinitionPair) => {\n        return Object.assign(properties, propertiesForValueDefinitionPair(valueDefinitionPair));\n    }, propertyDescriptorMap);\n}\nfunction propertiesForValueDefinitionPair(valueDefinitionPair) {\n    const definition = parseValueDefinitionPair(valueDefinitionPair);\n    const { key, name, reader: read, writer: write } = definition;\n    return {\n        [name]: {\n            get() {\n                const value = this.data.get(key);\n                if (value !== null) {\n                    return read(value);\n                }\n                else {\n                    return definition.defaultValue;\n                }\n            },\n            set(value) {\n                if (value === undefined) {\n                    this.data.delete(key);\n                }\n                else {\n                    this.data.set(key, write(value));\n                }\n            }\n        },\n        [`has${capitalize(name)}`]: {\n            get() {\n                return this.data.has(key) || definition.hasCustomDefaultValue;\n            }\n        }\n    };\n}\nfunction parseValueDefinitionPair([token, typeDefinition]) {\n    return valueDescriptorForTokenAndTypeDefinition(token, typeDefinition);\n}\nfunction parseValueTypeConstant(constant) {\n    switch (constant) {\n        case Array: return \"array\";\n        case Boolean: return \"boolean\";\n        case Number: return \"number\";\n        case Object: return \"object\";\n        case String: return \"string\";\n    }\n}\nfunction parseValueTypeDefault(defaultValue) {\n    switch (typeof defaultValue) {\n        case \"boolean\": return \"boolean\";\n        case \"number\": return \"number\";\n        case \"string\": return \"string\";\n    }\n    if (Array.isArray(defaultValue))\n        return \"array\";\n    if (Object.prototype.toString.call(defaultValue) === \"[object Object]\")\n        return \"object\";\n}\nfunction parseValueTypeObject(typeObject) {\n    const typeFromObject = parseValueTypeConstant(typeObject.type);\n    if (typeFromObject) {\n        const defaultValueType = parseValueTypeDefault(typeObject.default);\n        if (typeFromObject !== defaultValueType) {\n            throw new Error(`Type \"${typeFromObject}\" must match the type of the default value. Given default value: \"${typeObject.default}\" as \"${defaultValueType}\"`);\n        }\n        return typeFromObject;\n    }\n}\nfunction parseValueTypeDefinition(typeDefinition) {\n    const typeFromObject = parseValueTypeObject(typeDefinition);\n    const typeFromDefaultValue = parseValueTypeDefault(typeDefinition);\n    const typeFromConstant = parseValueTypeConstant(typeDefinition);\n    const type = typeFromObject || typeFromDefaultValue || typeFromConstant;\n    if (type)\n        return type;\n    throw new Error(`Unknown value type \"${typeDefinition}\"`);\n}\nfunction defaultValueForDefinition(typeDefinition) {\n    const constant = parseValueTypeConstant(typeDefinition);\n    if (constant)\n        return defaultValuesByType[constant];\n    const defaultValue = typeDefinition.default;\n    if (defaultValue !== undefined)\n        return defaultValue;\n    return typeDefinition;\n}\nfunction valueDescriptorForTokenAndTypeDefinition(token, typeDefinition) {\n    const key = `${dasherize(token)}-value`;\n    const type = parseValueTypeDefinition(typeDefinition);\n    return {\n        type,\n        key,\n        name: camelize(key),\n        get defaultValue() { return defaultValueForDefinition(typeDefinition); },\n        get hasCustomDefaultValue() { return parseValueTypeDefault(typeDefinition) !== undefined; },\n        reader: readers[type],\n        writer: writers[type] || writers.default\n    };\n}\nconst defaultValuesByType = {\n    get array() { return []; },\n    boolean: false,\n    number: 0,\n    get object() { return {}; },\n    string: \"\"\n};\nconst readers = {\n    array(value) {\n        const array = JSON.parse(value);\n        if (!Array.isArray(array)) {\n            throw new TypeError(\"Expected array\");\n        }\n        return array;\n    },\n    boolean(value) {\n        return !(value == \"0\" || value == \"false\");\n    },\n    number(value) {\n        return Number(value);\n    },\n    object(value) {\n        const object = JSON.parse(value);\n        if (object === null || typeof object != \"object\" || Array.isArray(object)) {\n            throw new TypeError(\"Expected object\");\n        }\n        return object;\n    },\n    string(value) {\n        return value;\n    }\n};\nconst writers = {\n    default: writeString,\n    array: writeJSON,\n    object: writeJSON\n};\nfunction writeJSON(value) {\n    return JSON.stringify(value);\n}\nfunction writeString(value) {\n    return `${value}`;\n}\n\nclass Controller {\n    constructor(context) {\n        this.context = context;\n    }\n    static get shouldLoad() {\n        return true;\n    }\n    get application() {\n        return this.context.application;\n    }\n    get scope() {\n        return this.context.scope;\n    }\n    get element() {\n        return this.scope.element;\n    }\n    get identifier() {\n        return this.scope.identifier;\n    }\n    get targets() {\n        return this.scope.targets;\n    }\n    get classes() {\n        return this.scope.classes;\n    }\n    get data() {\n        return this.scope.data;\n    }\n    initialize() {\n    }\n    connect() {\n    }\n    disconnect() {\n    }\n    dispatch(eventName, { target = this.element, detail = {}, prefix = this.identifier, bubbles = true, cancelable = true } = {}) {\n        const type = prefix ? `${prefix}:${eventName}` : eventName;\n        const event = new CustomEvent(type, { detail, bubbles, cancelable });\n        target.dispatchEvent(event);\n        return event;\n    }\n}\nController.blessings = [ClassPropertiesBlessing, TargetPropertiesBlessing, ValuePropertiesBlessing];\nController.targets = [];\nController.values = {};\n\nexport { Application, AttributeObserver, Context, Controller, ElementObserver, IndexedMultimap, Multimap, StringMapObserver, TokenListObserver, ValueListObserver, add, defaultSchema, del, fetch, prune };\n","/*!\n * hotkeys-js v3.8.7\n * A simple micro-library for defining and dispatching keyboard shortcuts. It has no dependencies.\n * \n * Copyright (c) 2021 kenny wong <wowohoo@qq.com>\n * http://jaywcjlove.github.io/hotkeys\n * \n * Licensed under the MIT license.\n */\n\nvar isff = typeof navigator !== 'undefined' ? navigator.userAgent.toLowerCase().indexOf('firefox') > 0 : false; // ç»å®äºä»¶\n\nfunction addEvent(object, event, method) {\n  if (object.addEventListener) {\n    object.addEventListener(event, method, false);\n  } else if (object.attachEvent) {\n    object.attachEvent(\"on\".concat(event), function () {\n      method(window.event);\n    });\n  }\n} // ä¿®é¥°é®è½¬æ¢æå¯¹åºçé®ç \n\n\nfunction getMods(modifier, key) {\n  var mods = key.slice(0, key.length - 1);\n\n  for (var i = 0; i < mods.length; i++) {\n    mods[i] = modifier[mods[i].toLowerCase()];\n  }\n\n  return mods;\n} // å¤çä¼ çkeyå­ç¬¦ä¸²è½¬æ¢ææ°ç»\n\n\nfunction getKeys(key) {\n  if (typeof key !== 'string') key = '';\n  key = key.replace(/\\s/g, ''); // å¹éä»»ä½ç©ºç½å­ç¬¦,åæ¬ç©ºæ ¼ãå¶è¡¨ç¬¦ãæ¢é¡µç¬¦ç­ç­\n\n  var keys = key.split(','); // åæ¶è®¾ç½®å¤ä¸ªå¿«æ·é®ï¼ä»¥','åå²\n\n  var index = keys.lastIndexOf(''); // å¿«æ·é®å¯è½åå«','ï¼éç¹æ®å¤ç\n\n  for (; index >= 0;) {\n    keys[index - 1] += ',';\n    keys.splice(index, 1);\n    index = keys.lastIndexOf('');\n  }\n\n  return keys;\n} // æ¯è¾ä¿®é¥°é®çæ°ç»\n\n\nfunction compareArray(a1, a2) {\n  var arr1 = a1.length >= a2.length ? a1 : a2;\n  var arr2 = a1.length >= a2.length ? a2 : a1;\n  var isIndex = true;\n\n  for (var i = 0; i < arr1.length; i++) {\n    if (arr2.indexOf(arr1[i]) === -1) isIndex = false;\n  }\n\n  return isIndex;\n}\n\nvar _keyMap = {\n  backspace: 8,\n  tab: 9,\n  clear: 12,\n  enter: 13,\n  return: 13,\n  esc: 27,\n  escape: 27,\n  space: 32,\n  left: 37,\n  up: 38,\n  right: 39,\n  down: 40,\n  del: 46,\n  delete: 46,\n  ins: 45,\n  insert: 45,\n  home: 36,\n  end: 35,\n  pageup: 33,\n  pagedown: 34,\n  capslock: 20,\n  num_0: 96,\n  num_1: 97,\n  num_2: 98,\n  num_3: 99,\n  num_4: 100,\n  num_5: 101,\n  num_6: 102,\n  num_7: 103,\n  num_8: 104,\n  num_9: 105,\n  num_multiply: 106,\n  num_add: 107,\n  num_enter: 108,\n  num_subtract: 109,\n  num_decimal: 110,\n  num_divide: 111,\n  'âª': 20,\n  ',': 188,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '-': isff ? 173 : 189,\n  '=': isff ? 61 : 187,\n  ';': isff ? 59 : 186,\n  '\\'': 222,\n  '[': 219,\n  ']': 221,\n  '\\\\': 220\n}; // Modifier Keys\n\nvar _modifier = {\n  // shiftKey\n  'â§': 16,\n  shift: 16,\n  // altKey\n  'â¥': 18,\n  alt: 18,\n  option: 18,\n  // ctrlKey\n  'â': 17,\n  ctrl: 17,\n  control: 17,\n  // metaKey\n  'â': 91,\n  cmd: 91,\n  command: 91\n};\nvar modifierMap = {\n  16: 'shiftKey',\n  18: 'altKey',\n  17: 'ctrlKey',\n  91: 'metaKey',\n  shiftKey: 16,\n  ctrlKey: 17,\n  altKey: 18,\n  metaKey: 91\n};\nvar _mods = {\n  16: false,\n  18: false,\n  17: false,\n  91: false\n};\nvar _handlers = {}; // F1~F12 special key\n\nfor (var k = 1; k < 20; k++) {\n  _keyMap[\"f\".concat(k)] = 111 + k;\n}\n\nvar _downKeys = []; // è®°å½æä¸çç»å®é®\n\nvar _scope = 'all'; // é»è®¤ç­é®èå´\n\nvar elementHasBindEvent = []; // å·²ç»å®äºä»¶çèç¹è®°å½\n// è¿åé®ç \n\nvar code = function code(x) {\n  return _keyMap[x.toLowerCase()] || _modifier[x.toLowerCase()] || x.toUpperCase().charCodeAt(0);\n}; // è®¾ç½®è·åå½åèå´ï¼é»è®¤ä¸º'ææ'ï¼\n\n\nfunction setScope(scope) {\n  _scope = scope || 'all';\n} // è·åå½åèå´\n\n\nfunction getScope() {\n  return _scope || 'all';\n} // è·åæä¸ç»å®é®çé®å¼\n\n\nfunction getPressedKeyCodes() {\n  return _downKeys.slice(0);\n} // è¡¨åæ§ä»¶æ§ä»¶å¤æ­ è¿å Boolean\n// hotkey is effective only when filter return true\n\n\nfunction filter(event) {\n  var target = event.target || event.srcElement;\n  var tagName = target.tagName;\n  var flag = true; // ignore: isContentEditable === 'true', <input> and <textarea> when readOnly state is false, <select>\n\n  if (target.isContentEditable || (tagName === 'INPUT' || tagName === 'TEXTAREA' || tagName === 'SELECT') && !target.readOnly) {\n    flag = false;\n  }\n\n  return flag;\n} // å¤æ­æä¸çé®æ¯å¦ä¸ºæä¸ªé®ï¼è¿åtrueæèfalse\n\n\nfunction isPressed(keyCode) {\n  if (typeof keyCode === 'string') {\n    keyCode = code(keyCode); // è½¬æ¢æé®ç \n  }\n\n  return _downKeys.indexOf(keyCode) !== -1;\n} // å¾ªç¯å é¤handlersä¸­çææ scope(èå´)\n\n\nfunction deleteScope(scope, newScope) {\n  var handlers;\n  var i; // æ²¡ææå®scopeï¼è·åscope\n\n  if (!scope) scope = getScope();\n\n  for (var key in _handlers) {\n    if (Object.prototype.hasOwnProperty.call(_handlers, key)) {\n      handlers = _handlers[key];\n\n      for (i = 0; i < handlers.length;) {\n        if (handlers[i].scope === scope) handlers.splice(i, 1);else i++;\n      }\n    }\n  } // å¦æscopeè¢«å é¤ï¼å°scopeéç½®ä¸ºall\n\n\n  if (getScope() === scope) setScope(newScope || 'all');\n} // æ¸é¤ä¿®é¥°é®\n\n\nfunction clearModifier(event) {\n  var key = event.keyCode || event.which || event.charCode;\n\n  var i = _downKeys.indexOf(key); // ä»åè¡¨ä¸­æ¸é¤æåè¿çé®\n\n\n  if (i >= 0) {\n    _downKeys.splice(i, 1);\n  } // ç¹æ®å¤ç cmmand é®ï¼å¨ cmmand ç»åå¿«æ·é® keyup åªæ§è¡ä¸æ¬¡çé®é¢\n\n\n  if (event.key && event.key.toLowerCase() === 'meta') {\n    _downKeys.splice(0, _downKeys.length);\n  } // ä¿®é¥°é® shiftKey altKey ctrlKey (command||metaKey) æ¸é¤\n\n\n  if (key === 93 || key === 224) key = 91;\n\n  if (key in _mods) {\n    _mods[key] = false; // å°ä¿®é¥°é®éç½®ä¸ºfalse\n\n    for (var k in _modifier) {\n      if (_modifier[k] === key) hotkeys[k] = false;\n    }\n  }\n}\n\nfunction unbind(keysInfo) {\n  // unbind(), unbind all keys\n  if (!keysInfo) {\n    Object.keys(_handlers).forEach(function (key) {\n      return delete _handlers[key];\n    });\n  } else if (Array.isArray(keysInfo)) {\n    // support like : unbind([{key: 'ctrl+a', scope: 's1'}, {key: 'ctrl-a', scope: 's2', splitKey: '-'}])\n    keysInfo.forEach(function (info) {\n      if (info.key) eachUnbind(info);\n    });\n  } else if (typeof keysInfo === 'object') {\n    // support like unbind({key: 'ctrl+a, ctrl+b', scope:'abc'})\n    if (keysInfo.key) eachUnbind(keysInfo);\n  } else if (typeof keysInfo === 'string') {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    // support old method\n    // eslint-disable-line\n    var scope = args[0],\n        method = args[1];\n\n    if (typeof scope === 'function') {\n      method = scope;\n      scope = '';\n    }\n\n    eachUnbind({\n      key: keysInfo,\n      scope: scope,\n      method: method,\n      splitKey: '+'\n    });\n  }\n} // è§£é¤ç»å®æä¸ªèå´çå¿«æ·é®\n\n\nvar eachUnbind = function eachUnbind(_ref) {\n  var key = _ref.key,\n      scope = _ref.scope,\n      method = _ref.method,\n      _ref$splitKey = _ref.splitKey,\n      splitKey = _ref$splitKey === void 0 ? '+' : _ref$splitKey;\n  var multipleKeys = getKeys(key);\n  multipleKeys.forEach(function (originKey) {\n    var unbindKeys = originKey.split(splitKey);\n    var len = unbindKeys.length;\n    var lastKey = unbindKeys[len - 1];\n    var keyCode = lastKey === '*' ? '*' : code(lastKey);\n    if (!_handlers[keyCode]) return; // å¤æ­æ¯å¦ä¼ å¥èå´ï¼æ²¡æå°±è·åèå´\n\n    if (!scope) scope = getScope();\n    var mods = len > 1 ? getMods(_modifier, unbindKeys) : [];\n    _handlers[keyCode] = _handlers[keyCode].map(function (record) {\n      // éè¿å½æ°å¤æ­ï¼æ¯å¦è§£é¤ç»å®ï¼å½æ°ç¸ç­ç´æ¥è¿å\n      var isMatchingMethod = method ? record.method === method : true;\n\n      if (isMatchingMethod && record.scope === scope && compareArray(record.mods, mods)) {\n        return {};\n      }\n\n      return record;\n    });\n  });\n}; // å¯¹çå¬å¯¹åºå¿«æ·é®çåè°å½æ°è¿è¡å¤ç\n\n\nfunction eventHandler(event, handler, scope) {\n  var modifiersMatch; // çå®æ¯å¦å¨å½åèå´\n\n  if (handler.scope === scope || handler.scope === 'all') {\n    // æ£æ¥æ¯å¦å¹éä¿®é¥°ç¬¦ï¼å¦ææè¿åtrueï¼\n    modifiersMatch = handler.mods.length > 0;\n\n    for (var y in _mods) {\n      if (Object.prototype.hasOwnProperty.call(_mods, y)) {\n        if (!_mods[y] && handler.mods.indexOf(+y) > -1 || _mods[y] && handler.mods.indexOf(+y) === -1) {\n          modifiersMatch = false;\n        }\n      }\n    } // è°ç¨å¤çç¨åºï¼å¦ææ¯ä¿®é¥°é®ä¸åå¤ç\n\n\n    if (handler.mods.length === 0 && !_mods[16] && !_mods[18] && !_mods[17] && !_mods[91] || modifiersMatch || handler.shortcut === '*') {\n      if (handler.method(event, handler) === false) {\n        if (event.preventDefault) event.preventDefault();else event.returnValue = false;\n        if (event.stopPropagation) event.stopPropagation();\n        if (event.cancelBubble) event.cancelBubble = true;\n      }\n    }\n  }\n} // å¤çkeydownäºä»¶\n\n\nfunction dispatch(event) {\n  var asterisk = _handlers['*'];\n  var key = event.keyCode || event.which || event.charCode; // è¡¨åæ§ä»¶è¿æ»¤ é»è®¤è¡¨åæ§ä»¶ä¸è§¦åå¿«æ·é®\n\n  if (!hotkeys.filter.call(this, event)) return; // Gecko(Firefox)çcommandé®å¼224ï¼å¨Webkit(Chrome)ä¸­ä¿æä¸è´\n  // Webkitå·¦å³ command é®å¼ä¸ä¸æ ·\n\n  if (key === 93 || key === 224) key = 91;\n  /**\n   * Collect bound keys\n   * If an Input Method Editor is processing key input and the event is keydown, return 229.\n   * https://stackoverflow.com/questions/25043934/is-it-ok-to-ignore-keydown-events-with-keycode-229\n   * http://lists.w3.org/Archives/Public/www-dom/2010JulSep/att-0182/keyCode-spec.html\n   */\n\n  if (_downKeys.indexOf(key) === -1 && key !== 229) _downKeys.push(key);\n  /**\n   * Jest test cases are required.\n   * ===============================\n   */\n\n  ['ctrlKey', 'altKey', 'shiftKey', 'metaKey'].forEach(function (keyName) {\n    var keyNum = modifierMap[keyName];\n\n    if (event[keyName] && _downKeys.indexOf(keyNum) === -1) {\n      _downKeys.push(keyNum);\n    } else if (!event[keyName] && _downKeys.indexOf(keyNum) > -1) {\n      _downKeys.splice(_downKeys.indexOf(keyNum), 1);\n    } else if (keyName === 'metaKey' && event[keyName] && _downKeys.length === 3) {\n      /**\n       * Fix if Command is pressed:\n       * ===============================\n       */\n      if (!(event.ctrlKey || event.shiftKey || event.altKey)) {\n        _downKeys = _downKeys.slice(_downKeys.indexOf(keyNum));\n      }\n    }\n  });\n  /**\n   * -------------------------------\n   */\n\n  if (key in _mods) {\n    _mods[key] = true; // å°ç¹æ®å­ç¬¦çkeyæ³¨åå° hotkeys ä¸\n\n    for (var k in _modifier) {\n      if (_modifier[k] === key) hotkeys[k] = true;\n    }\n\n    if (!asterisk) return;\n  } // å° modifierMap éé¢çä¿®é¥°é®ç»å®å° event ä¸­\n\n\n  for (var e in _mods) {\n    if (Object.prototype.hasOwnProperty.call(_mods, e)) {\n      _mods[e] = event[modifierMap[e]];\n    }\n  }\n  /**\n   * https://github.com/jaywcjlove/hotkeys/pull/129\n   * This solves the issue in Firefox on Windows where hotkeys corresponding to special characters would not trigger.\n   * An example of this is ctrl+alt+m on a Swedish keyboard which is used to type Î¼.\n   * Browser support: https://caniuse.com/#feat=keyboardevent-getmodifierstate\n   */\n\n\n  if (event.getModifierState && !(event.altKey && !event.ctrlKey) && event.getModifierState('AltGraph')) {\n    if (_downKeys.indexOf(17) === -1) {\n      _downKeys.push(17);\n    }\n\n    if (_downKeys.indexOf(18) === -1) {\n      _downKeys.push(18);\n    }\n\n    _mods[17] = true;\n    _mods[18] = true;\n  } // è·åèå´ é»è®¤ä¸º `all`\n\n\n  var scope = getScope(); // å¯¹ä»»ä½å¿«æ·é®é½éè¦åçå¤ç\n\n  if (asterisk) {\n    for (var i = 0; i < asterisk.length; i++) {\n      if (asterisk[i].scope === scope && (event.type === 'keydown' && asterisk[i].keydown || event.type === 'keyup' && asterisk[i].keyup)) {\n        eventHandler(event, asterisk[i], scope);\n      }\n    }\n  } // key ä¸å¨ _handlers ä¸­è¿å\n\n\n  if (!(key in _handlers)) return;\n\n  for (var _i = 0; _i < _handlers[key].length; _i++) {\n    if (event.type === 'keydown' && _handlers[key][_i].keydown || event.type === 'keyup' && _handlers[key][_i].keyup) {\n      if (_handlers[key][_i].key) {\n        var record = _handlers[key][_i];\n        var splitKey = record.splitKey;\n        var keyShortcut = record.key.split(splitKey);\n        var _downKeysCurrent = []; // è®°å½å½åæé®é®å¼\n\n        for (var a = 0; a < keyShortcut.length; a++) {\n          _downKeysCurrent.push(code(keyShortcut[a]));\n        }\n\n        if (_downKeysCurrent.sort().join('') === _downKeys.sort().join('')) {\n          // æ¾å°å¤çåå®¹\n          eventHandler(event, record, scope);\n        }\n      }\n    }\n  }\n} // å¤æ­ element æ¯å¦å·²ç»ç»å®äºä»¶\n\n\nfunction isElementBind(element) {\n  return elementHasBindEvent.indexOf(element) > -1;\n}\n\nfunction hotkeys(key, option, method) {\n  _downKeys = [];\n  var keys = getKeys(key); // éè¦å¤ççå¿«æ·é®åè¡¨\n\n  var mods = [];\n  var scope = 'all'; // scopeé»è®¤ä¸ºallï¼ææèå´é½ææ\n\n  var element = document; // å¿«æ·é®äºä»¶ç»å®èç¹\n\n  var i = 0;\n  var keyup = false;\n  var keydown = true;\n  var splitKey = '+'; // å¯¹ä¸ºè®¾å®èå´çå¤æ­\n\n  if (method === undefined && typeof option === 'function') {\n    method = option;\n  }\n\n  if (Object.prototype.toString.call(option) === '[object Object]') {\n    if (option.scope) scope = option.scope; // eslint-disable-line\n\n    if (option.element) element = option.element; // eslint-disable-line\n\n    if (option.keyup) keyup = option.keyup; // eslint-disable-line\n\n    if (option.keydown !== undefined) keydown = option.keydown; // eslint-disable-line\n\n    if (typeof option.splitKey === 'string') splitKey = option.splitKey; // eslint-disable-line\n  }\n\n  if (typeof option === 'string') scope = option; // å¯¹äºæ¯ä¸ªå¿«æ·é®è¿è¡å¤ç\n\n  for (; i < keys.length; i++) {\n    key = keys[i].split(splitKey); // æé®åè¡¨\n\n    mods = []; // å¦ææ¯ç»åå¿«æ·é®åå¾ç»åå¿«æ·é®\n\n    if (key.length > 1) mods = getMods(_modifier, key); // å°éä¿®é¥°é®è½¬åä¸ºé®ç \n\n    key = key[key.length - 1];\n    key = key === '*' ? '*' : code(key); // *è¡¨ç¤ºå¹éææå¿«æ·é®\n    // å¤æ­keyæ¯å¦å¨_handlersä¸­ï¼ä¸å¨å°±èµä¸ä¸ªç©ºæ°ç»\n\n    if (!(key in _handlers)) _handlers[key] = [];\n\n    _handlers[key].push({\n      keyup: keyup,\n      keydown: keydown,\n      scope: scope,\n      mods: mods,\n      shortcut: keys[i],\n      method: method,\n      key: keys[i],\n      splitKey: splitKey\n    });\n  } // å¨å¨å±documentä¸è®¾ç½®å¿«æ·é®\n\n\n  if (typeof element !== 'undefined' && !isElementBind(element) && window) {\n    elementHasBindEvent.push(element);\n    addEvent(element, 'keydown', function (e) {\n      dispatch(e);\n    });\n    addEvent(window, 'focus', function () {\n      _downKeys = [];\n    });\n    addEvent(element, 'keyup', function (e) {\n      dispatch(e);\n      clearModifier(e);\n    });\n  }\n}\n\nvar _api = {\n  setScope: setScope,\n  getScope: getScope,\n  deleteScope: deleteScope,\n  getPressedKeyCodes: getPressedKeyCodes,\n  isPressed: isPressed,\n  filter: filter,\n  unbind: unbind\n};\n\nfor (var a in _api) {\n  if (Object.prototype.hasOwnProperty.call(_api, a)) {\n    hotkeys[a] = _api[a];\n  }\n}\n\nif (typeof window !== 'undefined') {\n  var _hotkeys = window.hotkeys;\n\n  hotkeys.noConflict = function (deep) {\n    if (deep && window.hotkeys === hotkeys) {\n      window.hotkeys = _hotkeys;\n    }\n\n    return hotkeys;\n  };\n\n  window.hotkeys = hotkeys;\n}\n\nexport default hotkeys;\n","import { Controller } from '@hotwired/stimulus'\r\nimport hotkeys from 'hotkeys-js'\r\n\r\nexport default class extends Controller {\r\n  static values = {\r\n    bindings: Object\r\n  }\r\n\r\n  initialize () {\r\n    this.actOnHotkeys = this.actOnHotkeys.bind(this)\r\n    this.connected = false\r\n  }\r\n\r\n  connect () {\r\n    this.actOnHotkeys(hotkeys)\r\n    this.connected = true\r\n  }\r\n\r\n  disconnect () {\r\n    this.actOnHotkeys(hotkeys.unbind)\r\n    this.connected = false\r\n  }\r\n\r\n  bindingsValueChanged () {\r\n    if (this.connected) this.actOnHotkeys(hotkeys.unbind)\r\n    this.bindings = Object.entries(this.bindingsValue)\r\n    if (this.connected) this.actOnHotkeys(hotkeys)\r\n  }\r\n\r\n  actOnHotkeys (func) {\r\n    setTimeout(\r\n      () =>\r\n        this.bindings\r\n          .map(this.map)\r\n          .filter(mapping => typeof mapping === 'object')\r\n          .forEach(mapping => func.apply(null, mapping)),\r\n      1\r\n    )\r\n  }\r\n\r\n  map = binding => {\r\n    try {\r\n      const [key, value] = binding\r\n      const [selector, target] = value.includes('->')\r\n        ? value.split('->')\r\n        : [null, value]\r\n      const [identifier, ...command] = target.split('#')\r\n      const method = command[0].split('(')[0]\r\n      const element = selector ? document.querySelector(selector) : this.element\r\n      const controller = this.application.getControllerForElementAndIdentifier(\r\n        element,\r\n        identifier\r\n      )\r\n\r\n      const matches = command.join('#').match(/^.+\\((.*)\\)$/)\r\n      const args = matches\r\n        ? matches[1].split(',').map(arg => {\r\n            const value = arg.trim().match(/^[\"']?((?:\\\\.|[^\"'\\\\])*)[\"']?$/)[1]\r\n            if (value === 'true') return true\r\n            if (value === 'false') return false\r\n            return isNaN(value) ? value : Number(value)\r\n          })\r\n        : []\r\n\r\n      if (typeof key === 'string' && typeof controller[method] === 'function')\r\n        return [key, controller[method].bind(controller, ...args)]\r\n    } catch (err) {}\r\n  }\r\n}\r\n"],"names":["camelize","value","replace","_","char","toUpperCase","capitalize","charAt","slice","dasherize","toLowerCase","readInheritableStaticArrayValues","constructor","propertyName","ancestors","getAncestorsForConstructor","Array","from","reduce","values","getOwnStaticArrayValues","forEach","name","add","Set","readInheritableStaticObjectPairs","pairs","push","getOwnStaticObjectPairs","Object","getPrototypeOf","reverse","definition","isArray","keys","map","key","extend","extendWithReflect","extended","Reflect","construct","arguments","new","target","prototype","create","setPrototypeOf","testReflectExtension","a","call","b","error","ClassPropertiesBlessing","classes","properties","classDefinition","assign","propertiesForClassDefinition","get","has","attribute","getAttributeName","Error","getAll","TargetPropertiesBlessing","targets","targetDefinition","propertiesForTargetDefinition","find","identifier","findAll","ValuePropertiesBlessing","valueDefinitionPairs","propertyDescriptorMap","valueDescriptorMap","result","valueDefinitionPair","valueDescriptor","parseValueDefinitionPair","attributeName","data","getAttributeNameForKey","propertiesForValueDefinitionPair","reader","read","writer","write","defaultValue","set","undefined","delete","hasCustomDefaultValue","token","typeDefinition","valueDescriptorForTokenAndTypeDefinition","parseValueTypeConstant","constant","Boolean","Number","String","parseValueTypeDefault","toString","parseValueTypeObject","typeObject","typeFromObject","type","defaultValueType","default","parseValueTypeDefinition","typeFromDefaultValue","typeFromConstant","defaultValueForDefinition","defaultValuesByType","readers","writers","array","boolean","number","object","string","JSON","parse","TypeError","writeString","writeJSON","stringify","Controller","context","shouldLoad","application","scope","element","initialize","connect","disconnect","dispatch","eventName","detail","prefix","bubbles","cancelable","event","CustomEvent","dispatchEvent","blessings","isff","navigator","userAgent","indexOf","addEvent","method","addEventListener","attachEvent","concat","window","getMods","modifier","mods","length","i","getKeys","split","index","lastIndexOf","splice","compareArray","a1","a2","arr1","arr2","isIndex","_keyMap","backspace","tab","clear","enter","return","esc","escape","space","left","up","right","down","del","ins","insert","home","end","pageup","pagedown","capslock","num_0","num_1","num_2","num_3","num_4","num_5","num_6","num_7","num_8","num_9","num_multiply","num_add","num_enter","num_subtract","num_decimal","num_divide","_modifier","shift","alt","option","ctrl","control","cmd","command","modifierMap","shiftKey","ctrlKey","altKey","metaKey","_mods","_handlers","k","_downKeys","_scope","elementHasBindEvent","code","x","charCodeAt","setScope","getScope","getPressedKeyCodes","filter","srcElement","tagName","flag","isContentEditable","readOnly","isPressed","keyCode","deleteScope","newScope","handlers","hasOwnProperty","clearModifier","which","charCode","hotkeys","unbind","keysInfo","info","eachUnbind","_len","args","_key","splitKey","_ref","_ref$splitKey","multipleKeys","originKey","unbindKeys","len","lastKey","record","isMatchingMethod","eventHandler","handler","modifiersMatch","y","shortcut","preventDefault","returnValue","stopPropagation","cancelBubble","asterisk","keyName","keyNum","e","getModifierState","keydown","keyup","_i","keyShortcut","_downKeysCurrent","sort","join","isElementBind","document","_api","_hotkeys","noConflict","deep","binding","selector","includes","querySelector","controller","getControllerForElementAndIdentifier","matches","match","arg","trim","isNaN","bind","err","actOnHotkeys","connected","bindings","entries","bindingsValue","func","setTimeout","mapping","apply"],"mappings":"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"}